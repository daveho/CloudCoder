package org.cloudcoder.app.wizard.exec;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import javax.xml.bind.DatatypeConverter;

import net.schmizz.sshj.SSHClient;
import net.schmizz.sshj.connection.channel.direct.Session;
import net.schmizz.sshj.connection.channel.direct.Session.Command;
import net.schmizz.sshj.transport.TransportException;
import net.schmizz.sshj.transport.verification.PromiscuousVerifier;
import net.schmizz.sshj.userauth.UserAuthException;
import net.schmizz.sshj.userauth.keyprovider.KeyProvider;
import net.schmizz.sshj.xfer.scp.SCPFileTransfer;

import org.apache.commons.io.IOUtils;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.cloudcoder.app.wizard.model.Document;
import org.cloudcoder.app.wizard.model.DocumentFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Bootstrap<InfoType extends ICloudInfo, ServiceType extends ICloudService<InfoType, ServiceType>> {
	private static final Logger logger = LoggerFactory.getLogger(Bootstrap.class);

	public interface SSHRunnable {
		public void run(SSHClient ssh) throws IOException;
	}
	
	// Real download site
	//public static final String DOWNLOAD_SITE = "https://s3.amazonaws.com/cloudcoder-binaries";

	// Temporary site for development
	public static final String DOWNLOAD_SITE = "http://faculty.ycp.edu/~dhovemey/cloudcoder";
	
	public static final String BOOTSTRAP_SCRIPT = DOWNLOAD_SITE + "/bootstrap.pl";
	
	private static class Drain implements Runnable {
		private InputStream is;
		private OutputStream os;
		
		public Drain(InputStream is, OutputStream os) {
			this.is = is;
			this.os = os;
		}
		
		@Override
		public void run() {
			try {
				IOUtils.copy(is, os);
			} catch (IOException e) {
				logger.error("Error draining stream ", e);
			} finally {
				IOUtils.closeQuietly(is);
				// Note: do NOT close the output stream
			}
		}
	}

	private ServiceType cloudService;

	public Bootstrap(ServiceType cloudService) {
		this.cloudService = cloudService;
	}
	
	public void establishSshConnectivity() throws ExecException {
		// Run a simple "Hello, world" command on the webapp instance.
		// This establishes that it is possible to connect via ssh,
		// which can take some time, so some number of retries may
		// be needed.
		int retries = 0;
		ExecException ex = null;
		while (true) {
			try {
				executeCommand("echo 'Hello world'");
				System.out.println("Hello world command executed successfully - ssh connectivity established");
				return;
			} catch (ExecException e) {
				System.err.println("Error executing hello world command (to establish ssh connectivity)");
				e.printStackTrace();
				ex = e;
				retries++;

				if (retries >= 10) {
					System.err.println("Too many retries attempting to run hello world command");
					throw ex;
				}
				
				System.out.println("Waiting 10 seconds before next retry");
				Util.sleep(10000);
			}
		}
	}
	
	public void downloadBootstrapScript() throws ExecException {
		try {
			// Fetch the bootstrap script from the download site
			executeCommand("wget " + BOOTSTRAP_SCRIPT);
		} catch (Exception e) {
			throw new ExecException("Error downloading bootstrap script on webapp instance", e);
		}
	}
	
	public void uploadBootstrapProperties() throws ExecException {
		try {
			// Generate a bootstrap config properties file
			File bootstrapPropertiesFile = new File(cloudService.getInfo().getDataDir(), "bootstrap.properties");
			try (PrintWriter w = new PrintWriter(new FileWriter(bootstrapPropertiesFile))) {
				w.println("# Bootstrap properties generated by CloudCoder installation wizard");
				writeConfigProperty(w, "ccUser", "ccAcct.username");
				writeConfigProperty(w, "ccPassword", "ccAcct.password");
				writeConfigProperty(w, "ccFirstName", "ccAcct.firstname");
				writeConfigProperty(w, "ccLastName", "ccAcct.lastname");
				writeConfigProperty(w, "ccEmail", "ccAcct.email");
				writeConfigProperty(w, "ccWebsite", "ccAcct.website");
				writeConfigProperty(w, "ccInstitutionName", "instDetails.institutionName");
				writeConfigProperty(w, "ccMysqlRootPasswd", "mysqlAcct.rootPasswd");
				writeConfigProperty(w, "ccMysqlCCPasswd", "mysqlAcct.ccPasswd");
				writeConfigProperty(w, "ccHostname", "dns.hostname");
			}
			
			// Copy bootstrap properties file to webapp instance
			copyFile(bootstrapPropertiesFile);
		} catch (Exception e) {
			throw new ExecException("Error uploading bootstrap properties to webapp instance", e);
		}
	}
	
	public void runBootstrapScript() throws ExecException {
		try {
			// Make the bootstrap script executable
			executeCommand("chmod a+x bootstrap.pl");
			
			// Execute the bootstrap script
			executeCommand("./bootstrap.pl --config=bootstrap.properties --enable=integrated-builder");
		} catch (Exception e) {
			throw new ExecException("Error executing build script", e);
		}
	}
	
	public void configureNoIpDNSHostName() throws ExecException {
		// Note that errors here are non-fatal.
		
		int statusCode;
		try {
			if (!cloudService.getDocument().getValue("dns.useNoIp").getBoolean()) {
				// Not using no-ip
				System.out.println("Not using No-IP");
				return;
			}
			
			String username = cloudService.getDocument().getValue("dns.noIpUsername").getString();
			String password = cloudService.getDocument().getValue("dns.noIpPassword").getString();
			String dnsHostname = cloudService.getDocument().getValue("dns.hostname").getString();
			String ipAddress = cloudService.getInfo().getWebappPublicIp();
			
			HttpClient client = HttpClientBuilder.create().build();
			HttpGet httpGet = new HttpGet(
					"https://dynupdate.no-ip.com/nic/update?hostname=" + dnsHostname + "&myip=" + ipAddress);
			String authHeaderValue =
					"Basic " +
					DatatypeConverter.printBase64Binary((username + ":" + password).getBytes(Charset.forName("UTF-8")));
			httpGet.addHeader("Authorization", authHeaderValue);
			
			HttpResponse resp = client.execute(httpGet);
			statusCode = resp.getStatusLine().getStatusCode();
		} catch (Exception e) {
			throw new NonFatalExecException("Error updating no-ip dynamic IP address", e);
		}
		
		if (statusCode != 200) {
			throw new NonFatalExecException("No-ip update request failed with code " + statusCode);
		}
	}

	private void writeConfigProperty(PrintWriter w, String propName, String varName) {
		w.printf("%s=%s\n", propName, cloudService.getDocument().getValue(varName).getString());
	}

	/**
	 * Execute remote command on the webapp server,
	 * diverting the remote process's stdout and stderr to
	 * System.out and System.err.
	 * 
	 * @param cmdStr  the command to execute
	 * @throws ExecException
	 */
	private void executeCommand(final String cmdStr) throws ExecException {
		try {
			doSsh(new SSHRunnable() {
				@Override
				public void run(SSHClient ssh) throws IOException {
					System.out.println("Starting ssh session...");
					Session session = ssh.startSession();
					System.out.println("ssh session started");
					session.setEnvVar("LANG", "en_US.UTF-8");
					try {
						System.out.println("Executing command: " + cmdStr);
						Command cmd = session.exec(cmdStr);

						// Divert command output and error
						System.out.println("Starting output redirection threads");
						Thread t1 = new Thread(new Drain(cmd.getInputStream(), System.out));
						Thread t2 = new Thread(new Drain(cmd.getErrorStream(), System.err));
						t1.start();
						t2.start();
						try {
							System.out.println("Waiting for output redirection threads to complete...");
							t1.join();
							t2.join();
							System.out.println("Output redirection threads are complete");
						} catch (InterruptedException e) {
							// Should not happen (?)
							throw new IOException("Drain thread interrupted?", e);
						}
						
						System.out.println("Waiting for command to complete...");
						cmd.join(10, TimeUnit.SECONDS);
						System.out.println("Command exit code is " + cmd.getExitStatus());
					} finally {
						System.out.println("Closing ssh session");
						session.close();
					}
				}
			});
		} catch (Exception e) {
			throw new ExecException("Error executing bootstrap command", e);
		}
	}
	
	private void copyFile(final File localFile) throws ExecException {
		try {
			doSsh(new SSHRunnable() {
				@Override
				public void run(SSHClient ssh) throws IOException {
					System.out.println("Uploading " + localFile.getAbsolutePath() + " to webapp server");
					ssh.useCompression();
					SCPFileTransfer scp = ssh.newSCPFileTransfer();
					// TODO: use TransferListener to report progress
					scp.upload(localFile.getAbsolutePath(), ".");
				}
			});
		} catch (Exception e) {
			throw new ExecException("Error copying bootstrap file", e);
		}
	}

	private void doSsh(SSHRunnable r) throws IOException, UserAuthException, TransportException {
		SSHClient ssh = new SSHClient();
		ssh.addHostKeyVerifier(new PromiscuousVerifier()); // FIXME: would be nice to have actual host key fingerprint
		try {
			InfoType info = cloudService.getInfo();
			System.out.println("Starting ssh connection...");
			ssh.connect(info.getWebappPublicIp());
			System.out.println("Connected");
			KeyProvider keys = ssh.loadKeys(info.getPrivateKeyFile().getAbsolutePath());
			System.out.println("Doing ssh authentication using keypair");
			ssh.authPublickey(info.getWebappServerUserName(), keys);
			System.out.println("Authentication successful");
			r.run(ssh);
		} finally {
			System.out.println("Closing ssh connection");
			ssh.close();
		}
	}
	
	// This is just for testing
	private static class TestCloudInfo extends AbstractCloudInfo implements ICloudInfo {
		private String username;
		private String hostAddress;
		private String keyPairFilename;

		public TestCloudInfo(String username, String hostAddress, String keyPairFilename) {
			this.username = username;
			this.hostAddress = hostAddress;
			this.keyPairFilename = keyPairFilename;
		}

		@Override
		public String getWebappPublicIp() {
			return hostAddress;
		}

		@Override
		public boolean isPrivateKeyGenerated() {
			throw new UnsupportedOperationException();
		}

		@Override
		public File getPrivateKeyFile() {
			return new File(keyPairFilename);
		}

		@Override
		public String getWebappPrivateIp() {
			throw new UnsupportedOperationException();
		}

		@Override
		public String getWebappServerUserName() {
			return username;
		}
	}
	
	private static class TestCloudService extends AbstractCloudService<TestCloudInfo, TestCloudService> {
		private Document document;
		private TestCloudInfo info;

		public TestCloudService(Document document, TestCloudInfo info) {
			this.document = document;
			this.info = info;
		}

		@Override
		public Document getDocument() {
			return document;
		}

		@Override
		public void addInstallSteps(
				InstallationProgress<TestCloudInfo, TestCloudService> progress) {
			throw new UnsupportedOperationException();
		}

		@Override
		public TestCloudInfo getInfo() {
			return info;
		}
	}

	// This is just for testing
	public static void main(String[] args) throws ExecException {
		@SuppressWarnings("resource")
		Scanner keyboard = new Scanner(System.in);
		System.out.print("Host username: ");
		String username = keyboard.nextLine();
		System.out.print("Host address: ");
		String hostAddress = keyboard.nextLine();
		System.out.print("Keypair file: ");
		String keyPairFilename = keyboard.nextLine();

		TestCloudInfo info = new TestCloudInfo(username, hostAddress, keyPairFilename);
		Document document = DocumentFactory.create();
		// TODO: populate Document
		TestCloudService cloudService = new TestCloudService(document, info);

		cloudService.createDataDir();
		
		Bootstrap<TestCloudInfo, TestCloudService> bootstrap = new Bootstrap<TestCloudInfo, TestCloudService>(cloudService);
		
		bootstrap.downloadBootstrapScript();
		bootstrap.uploadBootstrapProperties();
		bootstrap.runBootstrapScript();
	}
}
